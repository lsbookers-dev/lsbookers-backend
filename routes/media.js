const express = require('express');
const router = express.Router();
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();
const authenticate = require('../middleware/authenticate');

// ‚úÖ Ajouter un m√©dia (photo ou vid√©o)
router.post('/', authenticate, async (req, res) => {
  const { url, type, isPromoted } = req.body;
  const userId = req.user.id;

  try {
    // üîç On r√©cup√®re le profil li√© √† l'utilisateur
    const profile = await prisma.profile.findUnique({
      where: { userId }
    });

    if (!profile) {
      return res.status(404).json({ error: 'Profil introuvable' });
    }

    const media = await prisma.media.create({
      data: {
        url,
        type,
        isPromoted: isPromoted === true,
        userId,
        profileId: profile.id  // ‚úÖ association au profil
      }
    });

    res.json({ message: 'M√©dia ajout√© ‚úÖ', media });
  } catch (error) {
    console.error('Erreur lors de l‚Äôajout du m√©dia :', error);
    res.status(500).json({ error: 'Erreur serveur ‚ùå' });
  }
});

// ‚úÖ R√©cup√©rer tous les m√©dias de l‚Äôutilisateur connect√©
router.get('/my', authenticate, async (req, res) => {
  const userId = req.user.id;

  try {
    const media = await prisma.media.findMany({
      where: { userId },
      orderBy: { createdAt: 'desc' }
    });

    res.json({ media });
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des m√©dias :', error);
    res.status(500).json({ error: 'Erreur serveur ‚ùå' });
  }
});

// ‚úÖ R√©cup√©rer tous les m√©dias publics d‚Äôun utilisateur via userId
router.get('/user/:userId', async (req, res) => {
  const { userId } = req.params;

  try {
    const media = await prisma.media.findMany({
      where: { userId: parseInt(userId) },
      orderBy: { createdAt: 'desc' }
    });

    res.json({ media });
  } catch (err) {
    console.error('Erreur lors de la r√©cup√©ration des m√©dias publics :', err);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

// ‚úÖ R√©cup√©rer tous les m√©dias li√©s √† un profil (optionnel)
router.get('/profile/:profileId', async (req, res) => {
  const { profileId } = req.params;

  try {
    const media = await prisma.media.findMany({
      where: { profileId: parseInt(profileId) },
      orderBy: { createdAt: 'desc' }
    });

    res.json({ media });
  } catch (err) {
    console.error('Erreur r√©cup√©ration m√©dias par profil :', err);
    res.status(500).json({ error: 'Erreur serveur' });
  }
});

module.exports = router;